Shader "Unlit/Blur OUT"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _Size ("Size", float) = 1
        _T ("ControlTime", float) = 10
        _Blur ("Blur", range(0 , 1)) = 1
        _Distortion ("Distortion", range(-5 , 5)) = 1
        _FT ("FrogTime", float) = 0
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" "queue" = "Transparent"}
        LOD 100

        GrabPass {"_GrabTexture"}
        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #define S(a,b,t) smoothstep(a,b,t)
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 grabUv: TEXCOORD1;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex, _GrabTexture;
            float4 _MainTex_ST;
            float _Size, _T, _Distortion, _Blur, _FT;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                o.grabUv = UNITY_PROJ_COORD(ComputeGrabScreenPos(o.vertex));
                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            float N21(float2 p){
               p = frac(p * float2(123.34, 345.45));
               p += dot(p, p +34.345);
               return frac(p.x * p.y);
			}

            float3 Layer(float2 UV, float b){
                float t = fmod(_Time.y - _T,7200);
               
                float2 uv= UV* _Size - .5;

                float x = 0;
                float y = 0;
                
                float2 centerPos = uv - float2(x,y);
                //float center = S(0.8 * S(0.0,5.0,t), (0.45) * S(0.0,6.0,t), length(centerPos));
                float center = S( .1 * sin( 0.8 * t - 3.14/2) + .15, -0.03,length(centerPos));//实心圆
                //float center = S( .25 * sin(.5 * t - 3.14/2) + .25, .15 * sin(.5 * t - 3.14/2),length(centerPos));
                float fog =  S(0.8 * S(20.0, _FT,t) + .01, (0.45) * S(20.0, _FT,t), length(centerPos));

                //col += center;
                float2 offs = center;//* centerPos;
                return float3(offs, fog);
			}

            fixed4 frag (v2f i) : SV_Target
            {
                // sample the texture
                fixed4 col = 0;
                float b = _Time.y;

                float3 centers = Layer(i.uv, b);

                //locate position
                //col.rg = uv;
                //if(uv.x > .98|| uv.y > .98) col = float4 (1,0,0,1);
                //float2 offs = center;// * centerPos;
                col = tex2D(_MainTex, i.uv + centers.xy);

                float fade = 1 - saturate(fwidth(i.uv) * 60);
                float blur = _Blur * 7 * (centers.z*fade);

                float2 projUv = i.grabUv.xy / i.grabUv.w;
                //projUv += centers.xy * _Distortion * fade;

                blur *= .01;
                
                const float numSamples = 20;
                float a = N21(i.uv) * 6.2831;
                for (float i = 0; i < numSamples; i++) {
                   float2 offs = float2(sin(a), cos(a)) * blur;
                   float d = frac(sin((i+1)*546.)*5424.);
                   d = sqrt(d);
                   offs *= d;
                   col += tex2D(_GrabTexture, projUv + offs);
                   a++;
				}
                col /= numSamples;

                return col;
            }
            ENDCG
        }
    }
}
